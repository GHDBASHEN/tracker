// src/pages/Profile.jsx
import { motion } from "framer-motion";
import BMIChart from "../components/charts/BMIChart";
import CaloriesChart from "../components/charts/CaloriesChart";
import { useAuth } from "../context/AuthContext";
import { useEffect, useState } from "react";
// Import the necessary service functions
import { getHealthProgress, getCaloriesConsumedBurned } from "../services/HealthMetricService";
import { updateUser } from "../services/UserService"; // Import update service

const Profile = () => {
    // Get user object and authentication states from context
    const { user, userId, isAuthenticated, isAuthLoading, setUser } = useAuth(); // Added setUser

    // States for chart data and loading indicators
    const [bmiHistory, setBmiHistory] = useState([]);
    const [calorieChartData, setCalorieChartData] = useState([]);
    const [chartsLoading, setChartsLoading] = useState(true);
    const [latestBmiCategory, setLatestBmiCategory] = useState('N/A');

    // States for edit functionality
    const [isEditing, setIsEditing] = useState(false);
    const [editLoading, setEditLoading] = useState(false);
    const [editForm, setEditForm] = useState({
        name: '',
        email: '',
        age: '',
        weight: '',
        height: ''
    });

    // Initialize edit form with current user data
    useEffect(() => {
        if (user) {
            setEditForm({
                name: user.name || '',
                email: user.email || '',
                age: user.age || '',
                weight: user.weight || '',
                height: user.height || ''
            });
        }
    }, [user]);

    // Fetch Advanced Data (Views)
    useEffect(() => {
        if (isAuthenticated && userId) {
            setChartsLoading(true);

            const fetchChartsData = async () => {
                // BMI History and Category
                try {
                    const progressRes = await getHealthProgress(userId);
                    const sortedProgressData = progressRes.data;

                    if (sortedProgressData && sortedProgressData.length > 0) {
                        setLatestBmiCategory(sortedProgressData[0].bmiCategory || 'N/A');
                        const chartBmiData = sortedProgressData.map(item => ({
                            date: new Date(item.date).toISOString().split('T')[0],
                            bmi: item.bmi,
                        })).filter(item => item.bmi);
                        setBmiHistory(chartBmiData.reverse());
                    } else {
                        setBmiHistory([]);
                        setLatestBmiCategory('N/A');
                    }
                } catch (e) {
                    console.error("Failed to fetch BMI history:", e);
                    setBmiHistory([]);
                    setLatestBmiCategory('N/A');
                }

                // Calorie Data
                try {
                    const calorieRes = await getCaloriesConsumedBurned(userId);
                    const rawData = calorieRes.data;

                    const dailyTotals = {};
                    rawData.forEach(item => {
                        const dateStr = new Date(item.date).toISOString().split('T')[0];
                        if (!dailyTotals[dateStr]) {
                            dailyTotals[dateStr] = { date: dateStr, consumed: 0, burned: 0 };
                        }
                        dailyTotals[dateStr].consumed += item.calories_consumed || 0;
                        dailyTotals[dateStr].burned += item.calories_burned || 0;
                    });

                    const aggregatedChartData = Object.values(dailyTotals)
                        .sort((a, b) => new Date(a.date) - new Date(b.date));

                    setCalorieChartData(aggregatedChartData);

                } catch (e) {
                    console.error("Failed to fetch and aggregate calorie chart data:", e);
                    setCalorieChartData([]);
                }

                setChartsLoading(false);
            };

            fetchChartsData();
        } else {
            setBmiHistory([]);
            setCalorieChartData([]);
            setLatestBmiCategory('N/A');
            setChartsLoading(false);
        }
    }, [userId, isAuthenticated]);

    // Handle edit form changes
    const handleEditChange = (e) => {
        const { name, value } = e.target;
        setEditForm(prev => ({
            ...prev,
            [name]: value
        }));
    };

    // Handle form submission
    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!userId) return;

        setEditLoading(true);
        try {
            // Prepare data for API - convert numbers where needed
            const updateData = {
                name: editForm.name,
                email: editForm.email,
                age: editForm.age ? parseInt(editForm.age) : null,
                weight: editForm.weight ? parseFloat(editForm.weight) : null,
                height: editForm.height ? parseFloat(editForm.height) : null
            };

            const updatedUser = await updateUser(userId, updateData);

            // Update user in context directly
            if (setUser) {
                setUser(prevUser => ({
                    ...prevUser,
                    ...updateData,
                    // Recalculate BMI if needed, or let backend handle it
                    bmi: calculateBMI(updateData.weight, updateData.height)
                }));
            }

            // Exit edit mode
            setIsEditing(false);

            // Show success message
            alert("Profile updated successfully!");

        } catch (error) {
            console.error("Failed to update profile:", error);
            alert("Failed to update profile. Please try again.");
        } finally {
            setEditLoading(false);
        }
    };

    // Helper function to calculate BMI
    const calculateBMI = (weight, height) => {
        if (!weight || !height) return null;
        // Convert height from cm to meters
        const heightInMeters = height / 100;
        return (weight / (heightInMeters * heightInMeters)).toFixed(1);
    };

    // Cancel editing
    const handleCancel = () => {
        // Reset form to original user data
        setEditForm({
            name: user.name || '',
            email: user.email || '',
            age: user.age || '',
            weight: user.weight || '',
            height: user.height || ''
        });
        setIsEditing(false);
    };

    const calculatedBMI = user?.bmi ? parseFloat(user.bmi).toFixed(1) : 'N/A';

    if (isAuthLoading || chartsLoading) {
        return (
            <div className="card text-center py-12">
                <div className="flex flex-col items-center">
                    <div className="w-12 h-12 border-4 border-primary-blue border-t-transparent rounded-full animate-spin mb-4"></div>
                    <p className="text-text-muted">Loading user profile and charts...</p>
                </div>
            </div>
        );
    }

    if (!isAuthenticated || !user) {
        return (
            <div className="card text-center py-12">
                <h3 className="text-xl font-semibold text-text-dark mb-2">Access Denied</h3>
                <p className="text-text-muted">Please log in to view your profile.</p>
            </div>
        );
    }

    const userName = user?.name || 'User';

    return (
        <motion.div
            className="max-w-4xl mx-auto space-y-8"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.3 }}
        >
            {/* Header with Edit Button */}
            <div className="flex justify-between items-center mb-6 border-b pb-3">
                <h1 className="text-3xl font-bold text-primary-blue">
                    {userName}’s Profile 👤
                </h1>
                {!isEditing && (
                    <motion.button
                        onClick={() => setIsEditing(true)}
                        className="bg-primary-blue text-white px-6 py-2 rounded-lg hover:bg-primary-blue/90 transition-colors flex items-center gap-2"
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                    >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                        </svg>
                        Edit Profile
                    </motion.button>
                )}
            </div>

            {/* Edit Form or User Info Card */}
            {isEditing ? (
                <motion.div
                    className="card"
                    initial={{ y: 20, opacity: 0 }}
                    animate={{ y: 0, opacity: 1 }}
                >
                    <h2 className="text-xl font-semibold text-text-dark border-b border-gray-100 pb-2 mb-4">
                        Edit Profile
                    </h2>
                    <form onSubmit={handleSubmit} className="space-y-4">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            {/* Name */}
                            <div>
                                <label className="block text-sm font-medium text-text-muted mb-1">
                                    Full Name
                                </label>
                                <input
                                    type="text"
                                    name="name"
                                    value={editForm.name}
                                    onChange={handleEditChange}
                                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-blue focus:border-transparent"
                                    required
                                />
                            </div>

                            {/* Email */}
                            <div>
                                <label className="block text-sm font-medium text-text-muted mb-1">
                                    Email
                                </label>
                                <input
                                    type="email"
                                    name="email"
                                    value={editForm.email}
                                    onChange={handleEditChange}
                                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-blue focus:border-transparent"
                                    required
                                />
                            </div>

                            {/* Age */}
                            <div>
                                <label className="block text-sm font-medium text-text-muted mb-1">
                                    Age
                                </label>
                                <input
                                    type="number"
                                    name="age"
                                    value={editForm.age}
                                    onChange={handleEditChange}
                                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-blue focus:border-transparent"
                                    min="1"
                                    max="120"
                                />
                            </div>

                            {/* Weight */}
                            <div>
                                <label className="block text-sm font-medium text-text-muted mb-1">
                                    Weight (kg)
                                </label>
                                <input
                                    type="number"
                                    name="weight"
                                    value={editForm.weight}
                                    onChange={handleEditChange}
                                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-blue focus:border-transparent"
                                    min="1"
                                    step="0.1"
                                />
                            </div>

                            {/* Height */}
                            <div>
                                <label className="block text-sm font-medium text-text-muted mb-1">
                                    Height (cm)
                                </label>
                                <input
                                    type="number"
                                    name="height"
                                    value={editForm.height}
                                    onChange={handleEditChange}
                                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-blue focus:border-transparent"
                                    min="1"
                                    step="0.1"
                                />
                            </div>
                        </div>

                        {/* Form Actions */}
                        <div className="flex gap-3 pt-4">
                            <motion.button
                                type="submit"
                                disabled={editLoading}
                                className="bg-primary-blue text-white px-6 py-2 rounded-lg hover:bg-primary-blue/90 transition-colors disabled:opacity-50 flex items-center gap-2"
                                whileHover={{ scale: 1.05 }}
                                whileTap={{ scale: 0.95 }}
                            >
                                {editLoading ? (
                                    <>
                                        <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                                        Updating...
                                    </>
                                ) : (
                                    'Save Changes'
                                )}
                            </motion.button>

                            <motion.button
                                type="button"
                                onClick={handleCancel}
                                disabled={editLoading}
                                className="bg-gray-300 text-gray-700 px-6 py-2 rounded-lg hover:bg-gray-400 transition-colors disabled:opacity-50"
                                whileHover={{ scale: 1.05 }}
                                whileTap={{ scale: 0.95 }}
                            >
                                Cancel
                            </motion.button>
                        </div>
                    </form>
                </motion.div>
            ) : (
                /* Original User Info Card (Read-only) */
                <motion.div
                    className="card grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4"
                    initial={{ y: 20, opacity: 0 }}
                    animate={{ y: 0, opacity: 1 }}
                    transition={{ delay: 0.1 }}
                >
                    <div className="lg:col-span-5 mb-2">
                        <h2 className="text-xl font-semibold text-text-dark border-b border-gray-100 pb-2">Personal Metrics</h2>
                    </div>
                    {/* Age */}
                    <div className="bg-gray-50 p-4 rounded-xl">
                        <p className="text-sm font-medium text-text-muted">Age</p>
                        <p className="text-xl font-bold text-text-dark">{user.age || 'N/A'}</p>
                    </div>
                    {/* Height */}
                    <div className="bg-gray-50 p-4 rounded-xl">
                        <p className="text-sm font-medium text-text-muted">Height</p>
                        <p className="text-xl font-bold text-text-dark">{user.height ? `${user.height} cm` : 'N/A'}</p>
                    </div>
                    {/* Weight */}
                    <div className="bg-gray-50 p-4 rounded-xl">
                        <p className="text-sm font-medium text-text-muted">Weight</p>
                        <p className="text-xl font-bold text-text-dark">{user.weight ? `${user.weight} kg` : 'N/A'}</p>
                    </div>
                    {/* BMI Value */}
                    <div className="bg-primary-blue bg-opacity-10 p-4 rounded-xl border border-primary-blue/20">
                        <p className="text-sm font-medium text-primary-blue">Current BMI</p>
                        <p className="text-xl font-bold text-primary-blue">{calculatedBMI}</p>
                    </div>
                    {/* BMI Category */}
                    <div className="bg-green-100 p-4 rounded-xl border border-green-200">
                        <p className="text-sm font-medium text-accent-green">Category</p>
                        <p className="text-xl font-bold text-accent-green">{latestBmiCategory}</p>
                    </div>
                </motion.div>
            )}

            {/* Charts Section (only show when not editing) */}
            {!isEditing && (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {/* BMI History Chart */}
                    <motion.div
                        className="card p-6"
                        initial={{ x: -20, opacity: 0 }}
                        animate={{ x: 0, opacity: 1 }}
                        transition={{ delay: 0.2 }}
                    >
                        <h2 className="text-xl font-semibold text-accent-green mb-4 border-b border-gray-100 pb-2">BMI History ⚖️</h2>
                        <BMIChart data={bmiHistory} />
                    </motion.div>
                    {/* Calories Chart */}
                    <motion.div
                        className="card p-6"
                        initial={{ x: 20, opacity: 0 }}
                        animate={{ x: 0, opacity: 1 }}
                        transition={{ delay: 0.3 }}
                    >
                        <h2 className="text-xl font-semibold text-primary-blue mb-4 border-b border-gray-100 pb-2">Calories Summary 📈</h2>
                        <CaloriesChart data={calorieChartData} />
                    </motion.div>
                </div>
            )}
        </motion.div>
    );
};

export default Profile;